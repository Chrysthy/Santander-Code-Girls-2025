## üß± 1. O que √© Terraform

- **Terraform** √© uma ferramenta de *Infraestrutura como C√≥digo (IaC)* desenvolvida pela HashiCorp.
- Permite definir, provisionar e gerenciar infraestrutura em nuvem (como AWS, Azure, GCP) usando arquivos de configura√ß√£o declarativos (`.tf`).
- **Vantagens**:
  - Controle de vers√£o da infraestrutura
  - Reutiliza√ß√£o de c√≥digo com m√≥dulos
  - Planejamento de mudan√ßas com `terraform plan`
  - Execu√ß√£o segura com `terraform apply`

---

## üß© 2. Entendendo a estrutura do Terraform

- **Arquivos principais**:
  - `main.tf`: define os recursos
  - `variables.tf`: declara vari√°veis reutiliz√°veis
  - `outputs.tf`: define sa√≠das √∫teis ap√≥s o provisionamento
  - `terraform.tfstate`: armazena o estado atual da infraestrutura
- **Boas pr√°ticas**:
  - Modulariza√ß√£o do c√≥digo
  - Separa√ß√£o por ambientes (dev, staging, prod)
  - Uso de workspaces para m√∫ltiplos ambientes

---

## üß™ 3. AWS local com LocalStack

- **LocalStack** √© uma ferramenta que simula servi√ßos da AWS localmente.
- Ideal para testes e desenvolvimento sem custos de nuvem.
- Suporta servi√ßos como S3, Lambda, DynamoDB, API Gateway, entre outros.
- Executado via Docker, com integra√ß√£o f√°cil com Terraform, AWS CLI e SDKs

---

## üõ†Ô∏è 4. Criando nosso ambiente LocalStack e IaC

- **Passos t√≠picos**:
  1. Instalar Docker e LocalStack
  2. Configurar `main.tf` com o provedor AWS apontando para o endpoint do LocalStack
  3. Executar `terraform init`, `plan` e `apply`
- **Benef√≠cios**:
  - Testes r√°pidos e seguros
  - Sem necessidade de conta AWS real
  - Ideal para aprendizado e CI/CD local

---

## üß∞ 5. NoSQL Workbench e Postman

- **NoSQL Workbench**:
  - Ferramenta gr√°fica para modelar, consultar e visualizar dados no DynamoDB
  - Permite simular queries e criar modelos de dados complexos
  - Suporta integra√ß√£o com DynamoDB local
- **Postman**:
  - Usado para testar APIs RESTful, como as expostas por API Gateway
  - Permite enviar requisi√ß√µes HTTP para endpoints locais (ex: LocalStack) ou reais
  - √ötil para validar integra√ß√µes entre servi√ßos (ex: API Gateway + Lambda)

---

## üîÅ 6. Destruir e recriar com IaC

- **Terraform** permite destruir e recriar infraestrutura com comandos:
  - `terraform destroy`: remove todos os recursos definidos
  - `terraform apply`: recria os recursos conforme o c√≥digo
- **Boas pr√°ticas**:
  - Usar `terraform plan` antes de aplicar mudan√ßas
  - Controlar o estado com `terraform state` para evitar perda de dados
  - Automatizar com pipelines CI/CD

---

## üèóÔ∏è 7. Criando

- **Cria√ß√£o de recursos** com Terraform envolve:
  - Definir o provedor (`provider "aws"`)
  - Declarar recursos (`resource "aws_s3_bucket"`, `aws_instance`, etc.)
  - Executar `terraform init`, `plan`, `apply`
- **Exemplo**:
  ```hcl
  resource "aws_s3_bucket" "meu_bucket" {
    bucket = "meu-bucket-exemplo"
    acl    = "private"
  }
  ```


---

## üßπ 8. Apagando

- **Remo√ß√£o de recursos**:
  - `terraform destroy`: remove todos os recursos do projeto
  - Para deletar apenas um recurso: remova do c√≥digo e execute `terraform apply`
- **Dica**: sempre verifique o plano (`terraform plan`) antes de aplicar destrui√ß√µes para evitar perda acidental

---
