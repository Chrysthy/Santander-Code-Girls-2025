## ‚òÅÔ∏è Migra√ß√£o de Empresas para Cloud

- **Objetivo**: Modernizar opera√ß√µes, reduzir custos e escalar com flexibilidade.
- **Modelos de migra√ß√£o**:
  - Lift-and-shift: mover aplica√ß√µes sem altera√ß√µes
  - Refatora√ß√£o: adaptar aplica√ß√µes para aproveitar recursos da nuvem
  - Replataforma: migrar com pequenas otimiza√ß√µes
- **Ferramentas AWS**:
  - AWS Migration Hub: centraliza progresso de migra√ß√£o
  - AWS Application Discovery Service: identifica depend√™ncias
  - AWS Database Migration Service (DMS): migra bancos de dados com m√≠nima interrup√ß√£o
- **Etapas recomendadas**:
  1. Avalia√ß√£o e planejamento
  2. Prova de conceito
  3. Migra√ß√£o por ondas
  4. Otimiza√ß√£o p√≥s-migra√ß√£o

---

## üß∞ DevOps com Ansible

- **Ansible**: Ferramenta de automa√ß√£o sem agente, ideal para configura√ß√£o e orquestra√ß√£o.
- **Integra√ß√£o com AWS**:
  - Usa invent√°rio din√¢mico via plugin `aws_ec2`
  - Pode ser integrado ao AWS Systems Manager para maior seguran√ßa e controle
- **Aplica√ß√µes**:
  - Provisionamento de EC2
  - Configura√ß√£o de ambientes
  - Automa√ß√£o de tarefas operacionais
- **Vantagens**:
  - Simplicidade com YAML
  - Boa para ambientes h√≠bridos e multi-cloud

---

## üß± DevOps com Terraform

- **Terraform**: Ferramenta de IaC que permite definir e provisionar infraestrutura com c√≥digo.
- **Integra√ß√£o com AWS**:
  - Usa o provedor `aws` para criar recursos como EC2, S3, VPC etc.
  - Suporte a m√≥dulos reutiliz√°veis e controle de estado
- **Fluxo t√≠pico**:
  1. `terraform init`
  2. `terraform plan`
  3. `terraform apply`
  4. `terraform destroy`
- **Vantagens**:
  - Multi-cloud
  - Controle de vers√£o da infraestrutura
  - Ideal para ambientes complexos e escal√°veis

---

## üì¶ DevOps com AWS CloudFormation

- **CloudFormation**: Servi√ßo nativo da AWS para IaC usando JSON ou YAML.
- **Funcionalidades**:
  - Cria√ß√£o de pilhas (stacks) com recursos interdependentes
  - Atualiza√ß√£o e rollback autom√°tico
  - Integra√ß√£o com CodePipeline e CloudWatch
- **Vantagens**:
  - Totalmente gerenciado pela AWS
  - Suporte a macros e transforma√ß√µes
  - Ideal para ambientes exclusivamente AWS

---

## üßë‚Äçüíª Trabalhando com DevOps

- **Pr√°ticas essenciais**:
  - CI/CD com CodePipeline, CodeBuild e CodeDeploy
  - Monitoramento com CloudWatch e X-Ray
  - IaC com Terraform ou CloudFormation
  - Automa√ß√£o com Ansible ou AWS Systems Manager
- **Cultura DevOps**:
  - Colabora√ß√£o entre Dev e Ops
  - Feedback cont√≠nuo
  - Responsabilidade compartilhada
- **Ferramentas recomendadas**:
  - Git + CodeCommit
  - Jenkins, GitHub Actions
  - Docker + ECS/EKS
  - IAM para controle de acesso

---